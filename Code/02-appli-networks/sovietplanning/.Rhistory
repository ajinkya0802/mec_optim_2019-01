setwd("C:/Users/jmcgn/Dropbox/MEC_optim_jan2019/code_mec_optim/Rcode_AG/01-appli-lp")
#################################################
##########  (c) by Alfred Galichon     ##########
#################################################
library(gurobi)
library(tictoc)
library(Rglpk)
# setting up the data
thepath = getwd()
filename="/StiglerData1939.txt"
thedata = as.matrix(read.csv(paste0(thepath,filename),sep="\t", header=T))
nbCommodities=length(which(thedata[,1] != "" ))-1
names = thedata[1:nbCommodities,1]
themat	= matrix( as.numeric(thedata[,3:13]), ncol = 11)
themat[is.na(themat)] = 0
# calling Gurobi
N = t(themat[1:nbCommodities,3:11])
d = themat[(nbCommodities+1),3:11]
c = rep(1,nbCommodities)
result   = gurobi ( list(A=N,obj=c,modelsense="min",rhs=d,sense=">"), params=list(OutputFlag=0) )
q_yearly  = result$x * 365 # convert into yearly cost
pi = result$pi
cost_daily =  result$objval
# display optimal solution
print("*** optimal solution ***")
toKeep = which(q_yearly !=0 )
foods = q_yearly[toKeep]
names(foods) = names[toKeep]
print(foods)
print(paste0("Total cost (optimal)= ", sum(q_yearly*c) ))
print("**************************")
# compare with Stigler's solution
print("*** Stigler's solution ***")
toKeepStigler = c(1,15,46,52,69)
foods_stigler = c(13.33, 3.84,4.11,1.85,16.80)
names(foods_stigler) = names[toKeepStigler]
print(foods_stigler)
print(paste0("Total cost (Stigler)= ", sum(foods_stigler*c[toKeepStigler]) ))
print("**************************")
# alternatively, use glpk
print("*** Optimal solution using Rglpk ***")
resGlpk = Rglpk_solve_LP(obj=c, mat=N, dir=rep(">",length(d)), rhs=d, bounds = NULL,
max = FALSE, control = list())
print(resGlpk$optimum*365)
setwd("C:/Users/jmcgn/Dropbox/MEC_optim_jan2019/code_mec_optim/Rcode_AG/02-appli-networks/sovietplanning")
#################################################
##########       Alfred Galichon       ##########
#################################################
library('gurobi')
library('Matrix')
thePath = getwd()
#data = read.csv(paste0(thePath,"/distances.csv"),sep=",", header=TRUE)
data = as.matrix(read.csv(paste0(thePath,"/distances.csv"),sep=",", header=TRUE)) # loads the data
nsources = 68
ndests = 10
dists = matrix(as.numeric(data[1:68,2:11]),68,10)
p = matrix(as.numeric(data[1:68,12]))
q = matrix(as.numeric(data[69,2:11]))
nonzeros = which(! is.na(dists))
nbNodes = nsources+ndests
nbArcs = length(nonzeros)
rows = (nonzeros-1) %% nsources + 1
cols = (nonzeros-1) %/% nsources + 1
costs = dists[nonzeros]
arcs = cbind(rows,cols+nsources,costs)
n = c(-p,q)
nameNodes = c(data[1:nsources] ,dimnames(data)[[2]][2:11])
# construct node-incidence matrix:
Nabla =  sparseMatrix(i=1:nbArcs,j=arcs[,1],dims=c(nbArcs,nbNodes),x=-1) + sparseMatrix(i=1:nbArcs,j=arcs[,2],dims=c(nbArcs,nbNodes),x=1)
# solve LP via Gurobi
result = gurobi ( list(A=t(Nabla),obj=costs,modelsense='min',rhs=n,sense='=',start=matrix(0,nbArcs,1)), params=NULL)
pi = result$x
distance = result$objval
print(distance)
#################################################
##########       Alfred Galichon       ##########
#################################################
library('gurobi')
library('Matrix')
thePath = getwd()
#data = read.csv(paste0(thePath,"/distances.csv"),sep=",", header=TRUE)
data = as.matrix(read.csv(paste0(thePath,"/distances.csv"),sep=",", header=TRUE)) # loads the data
nsources = 68
ndests = 10
dists = matrix(as.numeric(data[1:68,2:11]),68,10)
p = matrix(as.numeric(data[1:68,12]))
q = matrix(as.numeric(data[69,2:11]))
nonzeros = which(! is.na(dists))
nbNodes = nsources+ndests
nbArcs = length(nonzeros)
rows = (nonzeros-1) %% nsources + 1
cols = (nonzeros-1) %/% nsources + 1
costs = dists[nonzeros]
arcs = cbind(rows,cols+nsources,costs)
n = c(-p,q)
nameNodes = c(data[1:nsources] ,dimnames(data)[[2]][2:11])
# construct node-incidence matrix:
Nabla =  sparseMatrix(i=1:nbArcs,j=arcs[,1],dims=c(nbArcs,nbNodes),x=-1) + sparseMatrix(i=1:nbArcs,j=arcs[,2],dims=c(nbArcs,nbNodes),x=1)
# solve LP via Gurobi
result = gurobi ( list(A=t(Nabla),obj=costs,modelsense='min',rhs=n,sense='=',start=matrix(0,nbArcs,1)), params=NULL)
pi = result$x
distance = result$objval
print(distance)
#install_github("TraME-Project/TraME-R")
install_github("TraME-Project/Shortest-Path-R")
# Run during the break!
library('devtools')
#install_github("TraME-Project/TraME-R")
install_github("TraME-Project/Shortest-Path-R")
install_github("TraME-Project/yogurts")
install_github("TraME-Project/yogurts")
options(devtools.install.args = "--no-multiarch")
#install_github("TraME-Project/TraME-R")
install_github("TraME-Project/Shortest-Path-R")
install.packages(c("formatR", "jsonlite"), repos="http://cran.rstudio.com")
